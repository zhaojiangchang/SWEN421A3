        -:    0:Source:C:/Users/JackyChang/Documents/421A1/src/_test/scenarios/pump-test.adb
        -:    0:Programs:34
        -:    1:with Ada.Text_IO; use Ada.Text_IO;
        -:    2:with AUnit.Assertions; use AUnit.Assertions;
        -:    3:with sPrint;
        2:    4:package body PUMP.Test is
        -:    5:
        2:    6:   P: PUMP;
        -:    7:
        2:    8:   procedure Set_Up_Case (T: in out TC) is
        -:    9:      pragma Unreferenced (T);
        -:   10:   begin
        2:   11:      New_Line;
        2:   12:      Put_Line ("Set up case ..");
        -:   13:
        -:   14:
        2:   15:   end Set_Up_Case;
        -:   16:
        -:   17:
        4:   18:   procedure Set_Up (T : in out TC) is
        -:   19:   begin
        4:   20:      New_Line;
        4:   21:      Put_Line("Set Up ..");
        -:   22:
        4:   23:   end;
        -:   24:
        4:   25:   procedure Tear_Down (T : in out TC) is
        -:   26:   begin
        4:   27:      Put_Line("Tear Down ...");
        -:   28:
        4:   29:      P.NOZZLE_STATE:= NozzleBase;
        4:   30:      P.PUMP_STATE:=Base;
        4:   31:      P.FUEL_TYPE:= U91;
        4:   32:      P.RESERVOIR_INFO.TOTAL:=1000.00;
        4:   33:      P.PUMPED:= 0.00;
        -:   34:
        -:   35:
        -:   36:
        4:   37:   end;
        -:   38:
        2:   39:   procedure Tear_Down_Case (T : in out TC) is
        -:   40:   begin
        2:   41:      Put_Line ("Tear Down Case ..");
        2:   42:      P.NOZZLE_STATE:= NozzleBase;
        2:   43:      P.PUMP_STATE:=Base;
        2:   44:      P.FUEL_TYPE:= U91;
        2:   45:      P.RESERVOIR_INFO.TOTAL:=1000.00;
        2:   46:      P.PUMPED:= 0.00;
        -:   47:
        2:   48:   end;
        -:   49:
        -:   50:
        -:   51:   -- ===========================================================
        -:   52:   --                 TEST CASES/SCENARIOS
        -:   53:   -- ===========================================================
        -:   54:
        2:   55:      procedure Test_GET_SET(CWTC : in out AUnit.Test_Cases.Test_Case'Class) is
        -:   56:      begin
        2:   57:      SET_PUMP_STATE(P,Base);
        2:   58:      SET_PUMP_NOZZLE_STATE(P,NozzleBase);
        2:   59:      SET_RESERVOIR_SIZE(P,100.00);
        -:   60:
        2:   61:      Assert (Condition => (GET_UNIT_PRICE(P)) = 0.00,
        -:   62:               Message => "get ");
        2:   63:      Assert (Condition => (GET_TANKS_SIZE(P)) = 100.00,
        -:   64:               Message => "get ");
        2:   65:      Assert (Condition => (GET_RESEVOIR_CATEGORY(P)) = U91,
        -:   66:              Message => "get ");
        2:   67:      REMOVE_PETROL_RESERVOIR(P,10.00);
        2:   68:      SET_PUMPED(P,10.00);
        2:   69:      APPEND_RESERVOIR(P,U91);
        2:   70:      SET_FUEL_PRICE(P,2.00);
        2:   71:      Assert (Condition => (GET_CURRENT_NOZZLE_STATE(P)) = NozzleBase,
        -:   72:              Message => "get ");
        2:   73:      Assert (Condition => (GET_STATE(P)) = Base,
        -:   74:              Message => "get ");
        2:   75:      end Test_GET_SET;
        -:   76:
        2:   77:   procedure Test_RESERVOIR(CWTC : in out AUnit.Test_Cases.Test_Case'Class) is
        -:   78:      temp: RESERVOIR ;
        -:   79:   begin
        2:   80:      temp.TOTAL := 1000.00;
        2:   81:      temp.RESERVOIR_CATEGORY:=U91;
        2:   82:      Assert (Condition => (GET_TANKS_SIZE(P)) = 1000.00,
        -:   83:              Message => "Assert 2: GET_TANKS_SIZE ");
        2:   84:   end Test_RESERVOIR;
        -:   85:
        -:   86:   --     procedure Test_LEFT_NOZZLE (CWTC : in out AUnit.Test_Cases.Test_Case'Class) is
        -:   87:   --
        -:   88:   --     begin
        -:   89:   --
        -:   90:   --     end Test_LEFT_NOZZLE;
        -:   91:   --
        -:   92:   --      procedure Test_RETURN_NOZZLE (CWTC : in out AUnit.Test_Cases.Test_Case'Class) is
        -:   93:   --     begin
        -:   94:   --
        -:   95:   --     end Test_RETURN_NOZZLE;
        -:   96:
        -:   97:
        -:   98:   --     --==========================================================
        -:   99:   --     --               REGISTRATION/NAMING
        -:  100:   --     --==========================================================
        -:  101:   --
        2:  102:   procedure Register_Tests (T: in out TC) is
        -:  103:      use AUnit.Test_Cases.Registration;
        -:  104:   begin
        2:  105:      Register_Routine (Test => T,
        -:  106:                        Routine => Test_GET_SET'Access,
        -:  107:                        Name => "Test_GET_SET");
        2:  108:   Register_Routine (Test => T,
        -:  109:                        Routine => Test_RESERVOIR'Access,
        -:  110:                        Name => "Test_RESERVOIR");
        2:  111:   end Register_Tests;
        -:  112:
        4:  113:   function Name (T: TC) return AUnit.Message_String is
        -:  114:      pragma Unreferenced (T);
        -:  115:   begin
        4:  116:      return AUnit.Format ("Tests: Standard Tests");
        -:  117:   end Name;
        -:  118:
        2:  119:end PUMP.Test;
